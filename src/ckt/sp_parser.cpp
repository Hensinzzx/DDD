/*
 * sp_parser: P a r s e r  S u p p o r t
 *
 * Generated from: spgram.g
 *
 * Terence Parr, Russell Quong, Will Cohen, and Hank Dietz: 1989-1995
 * Parr Research Corporation
 * with Purdue University Electrical Engineering
 * with AHPCRC, University of Minnesota
 * ANTLR Version 1.33
 */

#include <stdio.h>
#define ANTLR_VERSION	133
#define ANTLR_SUPPORT_CODE
#include "tokens.h"
#include "sp_parser.h"

ANTLRChar *sp_parser::_token_tbl[]={
	/* 00 */	"Invalid",
	/* 01 */	"@",
	/* 02 */	"TITTLE",
	/* 03 */	"[\\ \\t]+",
	/* 04 */	"VALUE",
	/* 05 */	"NEWLINE",
	/* 06 */	"COMMENT",
	/* 07 */	"IC",
	/* 08 */	"TEMP",
	/* 09 */	"ONOFF",
	/* 10 */	"[Oo][Nn]",
	/* 11 */	"[Oo][Ff][Ff]",
	/* 12 */	"AC",
	/* 13 */	"DC",
	/* 14 */	"TRAN",
	/* 15 */	"EQUAL",
	/* 16 */	"COMMA",
	/* 17 */	"LEFTB",
	/* 18 */	"RIGHTB",
	/* 19 */	"VAR_NAME",
	/* 20 */	"IDENTIFIER",
	/* 21 */	"[\\ \\t]+",
	/* 22 */	"DOT",
	/* 23 */	"OP",
	/* 24 */	"SENS",
	/* 25 */	"TF",
	/* 26 */	"NOISE",
	/* 27 */	"SAVE",
	/* 28 */	"PRINT",
	/* 29 */	"PLOT",
	/* 30 */	"END",
	/* 31 */	"ENDS",
	/* 32 */	"MODEL",
	/* 33 */	"SUBCKT",
	/* 34 */	"OPTION",
	/* 35 */	"NODESET",
	/* 36 */	"PULSE",
	/* 37 */	"PULSE",
	/* 38 */	"pulse",
	/* 39 */	"SIN",
	/* 40 */	"SIN",
	/* 41 */	"sin",
	/* 42 */	"EXP",
	/* 43 */	"EXP",
	/* 44 */	"exp",
	/* 45 */	"PWL",
	/* 46 */	"PWL",
	/* 47 */	"pwl",
	/* 48 */	"SFFM",
	/* 49 */	"SFFM",
	/* 50 */	"sffm",
	/* 51 */	"RES",
	/* 52 */	"CAP",
	/* 53 */	"IND",
	/* 54 */	"MUIND",
	/* 55 */	"VOL",
	/* 56 */	"CUR",
	/* 57 */	"VCCS",
	/* 58 */	"VCVS",
	/* 59 */	"CCCS",
	/* 60 */	"CCVS",
	/* 61 */	"DIODE",
	/* 62 */	"BJT",
	/* 63 */	"JFET",
	/* 64 */	"MOSFET",
	/* 65 */	"MESFET",
	/* 66 */	"CKTCALL",
	/* 67 */	"DISTOF1",
	/* 68 */	"distof1",
	/* 69 */	"DISTOF2",
	/* 70 */	"distof2",
	/* 71 */	"\\(",
	/* 72 */	"\\)",
	/* 73 */	"VALUEA"
};

sp_parser::sp_parser(ANTLRTokenBuffer *input) : ANTLRParser(input,1,0,0,12)
{
	token_tbl = _token_tbl;
}

SetWordType sp_parser::err1[12] = {0x0,0x60,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err2[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x18,0x0,0x0,0x0
	};
SetWordType sp_parser::err3[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x60,0x0,0x0,0x0
	};
SetWordType sp_parser::err4[12] = {0x0,0x60,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::setwd1[74] = {0x0,0x2,0x0,0x0,0x0,0x5,0x5,
	0x0,0x0,0x0,0x0,0x0,0x0,0x88,0x88,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,
	0x0,0x40,0x40,0x0,0x40,0x40,0x0,0x40,
	0x40,0x0,0x40,0x40,0x5,0x5,0x5,0x5,
	0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,
	0x5,0x5,0x0,0x5,0x10,0x10,0x20,0x20,
	0x0,0x0,0x0};
SetWordType sp_parser::err5[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x18,0x0,0x0,0x0
	};
SetWordType sp_parser::err6[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x60,0x0,0x0,0x0
	};
SetWordType sp_parser::err7[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err8[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err9[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err10[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err11[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err12[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err13[12] = {0x10,0x0,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::ONOFF_set[12] = {0x0,0xc,0x0,0x0};
SetWordType sp_parser::err15[12] = {0x60,0x0,0x40,0x0, 0x0,0x0,0xf8,0xff, 0x5,0x0,0x0,0x0
	};
SetWordType sp_parser::setwd2[74] = {0x0,0x80,0x0,0x0,0x0,0x80,0x80,
	0x40,0x40,0x0,0x78,0x78,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x80,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,
	0x0,0x4,0x4,0x0,0x4,0x4,0x0,0x4,
	0x4,0x0,0x4,0x4,0x80,0x80,0x80,0x80,
	0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
	0x80,0x80,0x0,0x80,0x1,0x1,0x2,0x2,
	0x0,0x0,0x0};
SetWordType sp_parser::err16[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x80,0x1, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err17[12] = {0x0,0x70,0x80,0xff, 0x7,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err18[12] = {0x0,0x70,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::PULSE_set[12] = {0x0,0x0,0x0,0x0, 0x60,0x0,0x0,0x0};
SetWordType sp_parser::SIN_set[12] = {0x0,0x0,0x0,0x0, 0x0,0x3,0x0,0x0};
SetWordType sp_parser::EXP_set[12] = {0x0,0x0,0x0,0x0, 0x0,0x18,0x0,0x0};
SetWordType sp_parser::setwd3[74] = {0x0,0x8,0x0,0x0,0x0,0x8,0x8,
	0x1,0x1,0x0,0x1,0x1,0x6,0x6,0x6,
	0x0,0x0,0x0,0x0,0x10,0x1,0x0,0x8,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,
	0x0,0x40,0x40,0x0,0x80,0x80,0x0,0x0,
	0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x8,
	0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,
	0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0};
SetWordType sp_parser::PWL_set[12] = {0x0,0x0,0x0,0x0, 0x0,0xc0,0x0,0x0};
SetWordType sp_parser::SFFM_set[12] = {0x0,0x0,0x0,0x0, 0x0,0x0,0x6,0x0};
SetWordType sp_parser::err24[12] = {0x0,0x0,0x0,0x0, 0x60,0xdb,0x6,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::err25[12] = {0x80,0xd,0x10,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0
	};
SetWordType sp_parser::setwd4[74] = {0x0,0x0,0x0,0x0,0x8,0xd4,0x0,
	0x40,0x40,0x0,0x60,0x60,0x80,0x0,0x0,
	0x0,0x0,0x0,0x0,0x80,0x50,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,
	0x1,0x0,0x2,0x2,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x48,0x0};
SetWordType sp_parser::setwd5[74] = {0x0,0x0,0x0,0x0,0x0,0x1,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0};
